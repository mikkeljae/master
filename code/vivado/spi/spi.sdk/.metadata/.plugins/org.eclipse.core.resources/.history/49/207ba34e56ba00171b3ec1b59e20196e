/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xspips.h"

//GPIO DEFINES
#define GPIO_0  XPAR_GPIO_0_DEVICE_ID
#define GPIO_1  XPAR_GPIO_1_DEVICE_ID
#define DELAY	10000

//RF DEFINES
#define SPI_DEVICE_ID XPAR_PS7_SPI_1_DEVICE_ID
#define REGISTER_MASK 0x1F			// to make sure only register is set
// From NRF24 datasheet:
#define W_REGISTER    0x20
#define R_REGISTER    0x00

static XSpiPs SPI;
XGpio Gpio_CE;
XGpio Gpio_CSN;

s32 SPI_init(XSpiPs *SPI_inst, int device_id);
s32 RF_write_register(XSpiPs *SPI_inst, u8 reg, u8 value);
u8 RF_read_register(XSpiPs *SPI_inst, u8 reg);



int main()
{
    init_platform();

    print("Hello World\n\r");

	u32 Data;
	int status;
	volatile int Delay;

	/* Initialize the GPIO driver */
	status = XGpio_Initialize(&Gpio_CE, GPIO_0);
	status = XGpio_Initialize(&Gpio_CSN, GPIO_1);

	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	while(1){

			XGpio_DiscreteWrite(&Gpio_CE, 1, 1);
			XGpio_DiscreteWrite(&Gpio_CSN, 1, 0);
			for (Delay = 0; Delay < DELAY; Delay++);
			XGpio_DiscreteWrite(&Gpio_CE, 1, 0);
			XGpio_DiscreteWrite(&Gpio_CSN, 1, 0);
			for (Delay = 0; Delay < DELAY; Delay++);

	}
	*/
	status = SPI_init(&SPI, SPI_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("SPI init failed!\r\n");
	}else{
		xil_printf("SPI init succeded!\r\n");
	}

    cleanup_platform();
    return 0;
}







s32 SPI_init(XSpiPs *SPI_inst, int device_id){

	int status;
	XSpiPs_Config *SPI_config;

	// Initialize the SPI device.
	SPI_config = XSpiPs_LookupConfig(device_id);
	if (NULL == SPI_config) {
		return XST_FAILURE;
	}

	status = XSpiPs_CfgInitialize(SPI_inst, SPI_config, SPI_config->BaseAddress);
	if (status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	// Perform a self-test to check hardware build.
	status = XSpiPs_SelfTest(SPI_inst);
	if (status != XST_SUCCESS) {
		xil_printf("SPI SELFTEST Failed\r\n");
		return XST_FAILURE;
	}
	xil_printf("SPI SELFTEST SUCCEDED\r\n");

	// Set the SPI device as a master with manual start ....
	XSpiPs_SetOptions(SPI_inst, XSPIPS_MANUAL_START_OPTION | XSPIPS_CLK_ACTIVE_LOW_OPTION | XSPIPS_MASTER_OPTION | XSPIPS_FORCE_SSELECT_OPTION  );

	u32 config_ref;
	config_ref = XSpiPs_ReadReg(SPI_inst->Config.BaseAddress, XSPIPS_CR_OFFSET);
	config_ref |= XSPIPS_CR_MANSTRT_MASK;
	XSpiPs_WriteReg(SPI_inst->Config.BaseAddress,XSPIPS_CR_OFFSET, config_ref);


	// Set the SPI device pre-scalar to divide by 128
	XSpiPs_SetClkPrescaler(SPI_inst, XSPIPS_CLK_PRESCALE_128);

	// Set slave select to 0
	u32 var1;
	var1 = XSpiPs_SetSlaveSelect(SPI_inst, (u8) 0);
	if (status != XST_SUCCESS) {
		xil_printf("Slave Selection failed\r\n");
		return XST_FAILURE;
	}
	return XST_SUCCESS;
}


s32 RF_write_register(XSpiPs *SPI_inst, u8 reg, u8 value){
	u8 output =  (W_REGISTER | ( REGISTER_MASK & reg));
	XSpiPs_PolledTransfer(SPI_inst, &output, NULL, 1); 	//Send 1 bytes. Don't receive anything
	output = value;
	XSpiPs_PolledTransfer(SPI_inst, &output, NULL, 1);  //Send 1 bytes. Don't receive anything

	return XST_SUCCESS;
}


u8 RF_read_register(XSpiPs *SPI_inst, u8 reg){
	u8 output =  (R_REGISTER | ( REGISTER_MASK & reg));
	u8 input = 0;
	output = 0b11111111; 									// Just something
	XSpiPs_PolledTransfer(SPI_inst, &output, &input, 1); 	//Send 1 byte. Receive 1 byte
	return input;
}
